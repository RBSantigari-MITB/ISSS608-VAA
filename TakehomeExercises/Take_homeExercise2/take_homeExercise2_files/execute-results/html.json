{
  "hash": "160665ebf19b5800039bbd97354ae8c1",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Take_homeExercise2\"\nauthor: \"Rajesh\"\nformat:\n  html:\n    toc: true\neditor: visual\n---\n\n\n\n# Loading Packages\n\n\n\n\n\n\n\n# Step 1: Load Your CSV Files\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnodes <- read_csv(\"C:/RBSantigari-MITB/ISSS608-VAA/TakehomeExercises/Take_homeExercise2/data/Nodes_Table.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 17412 Columns: 10\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): Node Type, name, genre, stage_name\ndbl (4): release_date, id, written_date, notoriety_date\nlgl (2): single, notable\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n\n```{.r .cell-code}\nlinks <- read_csv(\"C:/RBSantigari-MITB/ISSS608-VAA/TakehomeExercises/Take_homeExercise2/data/Links_Table.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 37857 Columns: 4\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (1): Edge Type\ndbl (3): source, target, key\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n:::\n\n\n\n# Step 2: Check Structure\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(nodes)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 17,412\nColumns: 10\n$ `Node Type`    <chr> \"Song\", \"Person\", \"Person\", \"Person\", \"RecordLabel\", \"S…\n$ name           <chr> \"Breaking These Chains\", \"Carlos Duffy\", \"Min Qin\", \"Xi…\n$ single         <lgl> TRUE, NA, NA, NA, NA, FALSE, NA, NA, NA, NA, TRUE, NA, …\n$ release_date   <dbl> 2017, NA, NA, NA, NA, 2026, NA, NA, NA, NA, 2020, NA, N…\n$ genre          <chr> \"Oceanus Folk\", NA, NA, NA, NA, \"Lo-Fi Electronica\", NA…\n$ notable        <lgl> TRUE, NA, NA, NA, NA, TRUE, NA, NA, NA, NA, TRUE, NA, N…\n$ id             <dbl> 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 1…\n$ written_date   <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, 2020, NA, NA, N…\n$ stage_name     <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ notoriety_date <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n```\n\n\n:::\n\n```{.r .cell-code}\nglimpse(links)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 37,857\nColumns: 4\n$ `Edge Type` <chr> \"InterpolatesFrom\", \"RecordedBy\", \"PerformerOf\", \"Composer…\n$ source      <dbl> 0, 0, 1, 1, 2, 2, 3, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5…\n$ target      <dbl> 1841, 4, 0, 16180, 0, 16180, 0, 5088, 14332, 11677, 2479, …\n$ key         <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n```\n\n\n:::\n:::\n\n\n\n# Step 3: Identify Sailor Shift\n## 3.1 Find Sailor Shift in the Nodes\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsailor <- nodes %>%\n  filter(name == \"Sailor Shift\")\n\nsailor\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 10\n  `Node Type` name         single release_date genre notable    id written_date\n  <chr>       <chr>        <lgl>         <dbl> <chr> <lgl>   <dbl>        <dbl>\n1 Person      Sailor Shift NA               NA <NA>  NA      17255           NA\n# ℹ 2 more variables: stage_name <chr>, notoriety_date <dbl>\n```\n\n\n:::\n:::\n\n\n\n## 3.2 Save Sailor's ID\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsailor_id <- 17255\n```\n:::\n\n\n\n## 3.3 Get All Edges Where Sailor is Source or Target\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsailor_edges <- links %>%\n  filter(source == sailor_id | target == sailor_id)\n\nglimpse(sailor_edges)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 60\nColumns: 4\n$ `Edge Type` <chr> \"InStyleOf\", \"LyricalReferenceTo\", \"InterpolatesFrom\", \"In…\n$ source      <dbl> 17022, 17032, 17063, 17110, 17126, 17155, 17255, 17255, 17…\n$ target      <dbl> 17255, 17255, 17255, 17255, 17255, 17255, 16961, 16989, 16…\n$ key         <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0…\n```\n\n\n:::\n:::\n\n\n\n## 3.4 Get Connected IDs (Excluding Sailor Herself)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nconnected_ids <- unique(c(sailor_edges$source, sailor_edges$target))\nconnected_ids <- connected_ids[connected_ids != sailor_id]\n```\n:::\n\n\n\n# Step 4: Extract Connected Nodes\n## 4.1 View Sample Rows\n\n\n::: {.cell}\n\n```{.r .cell-code}\nconnected_nodes <- nodes %>%\n  filter(id %in% connected_ids) %>%\n  select(id, `Node Type`, name, genre)\n\nhead(connected_nodes, 10)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 10 × 4\n      id `Node Type`  name                                   genre       \n   <dbl> <chr>        <chr>                                  <chr>       \n 1 16961 Album        Neon Heartbeat                         Synthwave   \n 2 16989 Album        Ballads for the End of Time            Oceanus Folk\n 3 16999 Album        Melancholy Circuitry                   Americana   \n 4 17022 MusicalGroup Cassette Future                        <NA>        \n 5 17032 MusicalGroup Silver Veil                            <NA>        \n 6 17047 Album        Drifting Between the Stars and the Sea Oceanus Folk\n 7 17048 Album        Artificial Sunsets                     Oceanus Folk\n 8 17049 Album        Electric Reverie                       Oceanus Folk\n 9 17063 MusicalGroup The Phantom Operators                  <NA>        \n10 17110 MusicalGroup The Hollow Monarchs                    <NA>        \n```\n\n\n:::\n:::\n\n\n\n## 4.2 Clean Connected Nodes (Remove NA in ID/Name)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nconnected_nodes <- connected_nodes %>%\n  filter(!is.na(id) & !is.na(name))\n```\n:::\n\n\n\n# Step 5: Filter Connected Links\n\n\n::: {.cell}\n\n```{.r .cell-code}\nconnected_links <- links %>%\n  filter(source %in% connected_nodes$id | target %in% connected_nodes$id) %>%\n  filter(!is.na(source) & !is.na(target) & !is.na(`Edge Type`))\n```\n:::\n\n\n\n# Step 6: Check for Remaining NA Rows\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsum(is.na(connected_nodes$id))           # Should be 0\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0\n```\n\n\n:::\n\n```{.r .cell-code}\nsum(is.na(connected_nodes$name))         # Should be 0\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0\n```\n\n\n:::\n\n```{.r .cell-code}\nsum(is.na(connected_links$source))       # Should be 0\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0\n```\n\n\n:::\n\n```{.r .cell-code}\nsum(is.na(connected_links$target))       # Should be 0\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0\n```\n\n\n:::\n\n```{.r .cell-code}\nsum(is.na(connected_links$`Edge Type`))  # Should be 0\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0\n```\n\n\n:::\n:::\n\n\n\n# Step 7: Ensure Source and Target are Integers\n\n\n::: {.cell}\n\n```{.r .cell-code}\nconnected_links <- connected_links %>%\n  mutate(\n    source = as.integer(source),\n    target = as.integer(target)\n  )\n```\n:::\n\n\n\n# Step 8: Filter Links by Valid Node IDs\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvalid_ids <- connected_nodes$id\n\nconnected_links <- connected_links %>%\n  filter(source %in% valid_ids & target %in% valid_ids)\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}