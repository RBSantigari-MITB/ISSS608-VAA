---
title: "hands_onExercise3"
author: "Rajesh babu Santigari"
format: html
editor: visual
---

#**Programming Interactive Data Visualisation with R**
##3.2 Getting Started

```{r}
pacman::p_load(ggiraph, plotly, 
               patchwork, DT, tidyverse) 
```
##3.3 Importing Data
```{r}
exam_data <- read_csv("C:\\RBSantigari-MITB\\ISSS608-VAA\\HandsonExercise\\Hands_onExercise3\\data\\Exam_data.csv")
```
##3.4 Interactive Data Visualisation - ggiraph methods
###3.4.1 Tooltip effect with tooltip aesthetic
```{r}
p <- ggplot(data=exam_data, 
       aes(x = MATHS)) +
  geom_dotplot_interactive(
    aes(tooltip = ID),
    stackgroups = TRUE, 
    binwidth = 1, 
    method = "histodot") +
  scale_y_continuous(NULL, 
                     breaks = NULL)
girafe(
  ggobj = p,
  width_svg = 6,
  height_svg = 6*0.618
)
```

# -----------------------------------------               #######
# Extra Feature added(OnClick):                           #######
# Clicking on dots opens a search page for the student's ID #####
# This improves interactivity (Not part of original code)   #####
#------------------------------------------               #######
```{r}
p <- ggplot(data=exam_data, 
       aes(x = MATHS)) +
  geom_dotplot_interactive(
    aes(
      tooltip = ID,
      onclick = paste0('window.open(\"https://www.google.com/search?q=', ID, '\")')
  ),
    stackgroups = TRUE, 
    binwidth = 1, 
    method = "histodot"
  ) +
  scale_y_continuous(NULL, 
                     breaks = NULL)

girafe(
  ggobj = p,
  width_svg = 6,
  height_svg = 6*0.618
)
```
##3.5 Interactivity
###3.5.1 Displaying multiple information on tooltip
```{r}
exam_data$tooltip <- c(paste0(     
  "Name = ", exam_data$ID,         
  "\n Class = ", exam_data$CLASS)) 

p <- ggplot(data=exam_data, 
       aes(x = MATHS)) +
  geom_dotplot_interactive(
    aes(tooltip = exam_data$tooltip), 
    stackgroups = TRUE,
    binwidth = 1,
    method = "histodot") +
  scale_y_continuous(NULL,               
                     breaks = NULL)
girafe(
  ggobj = p,
  width_svg = 8,
  height_svg = 8*0.618
)
```
###3.6.1 Customising Tooltip style
```{r}
tooltip_css <- "background-color:white; #<<
font-style:bold; color:black;" #<<

p <- ggplot(data=exam_data, 
       aes(x = MATHS)) +
  geom_dotplot_interactive(              
    aes(tooltip = ID),                   
    stackgroups = TRUE,                  
    binwidth = 1,                        
    method = "histodot") +               
  scale_y_continuous(NULL,               
                     breaks = NULL)
girafe(                                  
  ggobj = p,                             
  width_svg = 6,                         
  height_svg = 6*0.618,
  options = list(    #<<
    opts_tooltip(    #<<
      css = tooltip_css)) #<<
)  
```
###3.6.2 Displaying statistics on tooltip
```{r}
tooltip <- function(y, ymax, accuracy = .01) {
  mean <- scales::number(y, accuracy = accuracy)
  sem <- scales::number(ymax - y, accuracy = accuracy)
  paste("Mean maths scores:", mean, "+/-", sem)
}

gg_point <- ggplot(data=exam_data, 
                   aes(x = RACE),
) +
  stat_summary(aes(y = MATHS, 
                   tooltip = after_stat(  
                     tooltip(y, ymax))),  
    fun.data = "mean_se", 
    geom = GeomInteractiveCol,  
    fill = "light blue"
  ) +
  stat_summary(aes(y = MATHS),
    fun.data = mean_se,
    geom = "errorbar", width = 0.2, size = 0.2
  )

girafe(ggobj = gg_point,
       width_svg = 8,
       height_svg = 8*0.618)
```
###3.6.3 Hover effect with data_id aesthetic
```{r}
p <- ggplot(data=exam_data, 
       aes(x = MATHS)) +
  geom_dotplot_interactive(           
    aes(data_id = CLASS),             
    stackgroups = TRUE,               
    binwidth = 1,                        
    method = "histodot") +               
  scale_y_continuous(NULL,               
                     breaks = NULL)
girafe(                                  
  ggobj = p,                             
  width_svg = 6,                         
  height_svg = 6*0.618                      
)                          
```
###3.6.4 Styling hover effect
```{r}
p <- ggplot(data=exam_data, 
       aes(x = MATHS)) +
  geom_dotplot_interactive(              
    aes(data_id = CLASS),              
    stackgroups = TRUE,                  
    binwidth = 1,                        
    method = "histodot") +               
  scale_y_continuous(NULL,               
                     breaks = NULL)
girafe(                                  
  ggobj = p,                             
  width_svg = 6,                         
  height_svg = 6*0.618,
  options = list(                        
    opts_hover(css = "fill: #202020;"),  
    opts_hover_inv(css = "opacity:0.2;") 
  )                                        
)                                        
```
###3.6.5 Combining tooltip and hover effect
```{r}
p <- ggplot(data=exam_data, 
       aes(x = MATHS)) +
  geom_dotplot_interactive(              
    aes(tooltip = CLASS, 
        data_id = CLASS),              
    stackgroups = TRUE,                  
    binwidth = 1,                        
    method = "histodot") +               
  scale_y_continuous(NULL,               
                     breaks = NULL)
girafe(                                  
  ggobj = p,                             
  width_svg = 6,                         
  height_svg = 6*0.618,
  options = list(                        
    opts_hover(css = "fill: #202020;"),  
    opts_hover_inv(css = "opacity:0.2;") 
  )                                        
)                                        
```
###3.6.6 Click effect with onclick(Note : I tried same but made google search previously)
```{r}
exam_data$onclick <- sprintf("window.open(\"%s%s\")",
"https://www.moe.gov.sg/schoolfinder?journey=Primary%20school",
as.character(exam_data$ID))

p <- ggplot(data=exam_data, 
       aes(x = MATHS)) +
  geom_dotplot_interactive(              
    aes(onclick = onclick),              
    stackgroups = TRUE,                  
    binwidth = 1,                        
    method = "histodot") +               
  scale_y_continuous(NULL,               
                     breaks = NULL)
girafe(                                  
  ggobj = p,                             
  width_svg = 6,                         
  height_svg = 6*0.618)
```
###3.6.7 Coordinated Multiple Views with ggiraph
```{r}
p1 <- ggplot(data=exam_data, 
       aes(x = MATHS)) +
  geom_dotplot_interactive(              
    aes(data_id = ID),              
    stackgroups = TRUE,                  
    binwidth = 1,                        
    method = "histodot") +  
  coord_cartesian(xlim=c(0,100)) + 
  scale_y_continuous(NULL,               
                     breaks = NULL)

p2 <- ggplot(data=exam_data, 
       aes(x = ENGLISH)) +
  geom_dotplot_interactive(              
    aes(data_id = ID),              
    stackgroups = TRUE,                  
    binwidth = 1,                        
    method = "histodot") + 
  coord_cartesian(xlim=c(0,100)) + 
  scale_y_continuous(NULL,               
                     breaks = NULL)

girafe(code = print(p1 + p2), 
       width_svg = 6,
       height_svg = 3,
       options = list(
         opts_hover(css = "fill: #202020;"),
         opts_hover_inv(css = "opacity:0.2;")
         )
       ) 
```
##3.7 Interactive Data Visualisation - plotly methods!
###3.7.1 Creating an interactive scatter plot: plot_ly() method
```{r}
plot_ly(data = exam_data, 
             x = ~MATHS, 
             y = ~ENGLISH)
```
###3.7.2 Working with visual variable: plot_ly() method
```{r}
plot_ly(data = exam_data, 
        x = ~ENGLISH, 
        y = ~MATHS, 
        color = ~RACE)
```
###3.7.3 Creating an interactive scatter plot: ggplotly() method
```{r}
p <- ggplot(data=exam_data, 
            aes(x = MATHS,
                y = ENGLISH)) +
  geom_point(size=1) +
  coord_cartesian(xlim=c(0,100),
                  ylim=c(0,100))
ggplotly(p)
```
###3.7.4 Coordinated Multiple Views with plotly
```{r}
d <- highlight_key(exam_data)
p1 <- ggplot(data=d, 
            aes(x = MATHS,
                y = ENGLISH)) +
  geom_point(size=1) +
  coord_cartesian(xlim=c(0,100),
                  ylim=c(0,100))

p2 <- ggplot(data=d, 
            aes(x = MATHS,
                y = SCIENCE)) +
  geom_point(size=1) +
  coord_cartesian(xlim=c(0,100),
                  ylim=c(0,100))
subplot(ggplotly(p1),
        ggplotly(p2))
```
##3.8 Interactive Data Visualisation - crosstalk methods!
###3.8.1 Interactive Data Table: DT package
```{r}
DT::datatable(exam_data, class= "compact")
```
###3.8.2 Linked brushing: crosstalk method
```{r}
d <- highlight_key(exam_data) 
p <- ggplot(d, 
            aes(ENGLISH, 
                MATHS)) + 
  geom_point(size=1) +
  coord_cartesian(xlim=c(0,100),
                  ylim=c(0,100))

gg <- highlight(ggplotly(p),        
                "plotly_selected")  

crosstalk::bscols(gg,               
                  DT::datatable(d), 
                  widths = 5)        
```

#3.9.2 plotly for R


#  -------------------------------------------    #########
#  Drawing plot for zoom in and out               #########
# This improves interactivity (Not part of original code)##

```{r}

library(plotly)

fig <- plot_ly(
    data = exam_data,    
    x = ~MATHS,              
    y = ~ENGLISH,
    type = 'scatter',
    mode = 'lines+markers'
  ) %>%
  layout(
    plot_bgcolor = '#e5ecf6',
    xaxis = list(
      zerolinecolor = '#ffff',
      zerolinewidth = 2,
      gridcolor = '#ffff'
    ),
    yaxis = list(
      zerolinecolor = '#ffff',
      zerolinewidth = 2,
      gridcolor = '#ffff'
    )
  )

fig <- config(fig, scrollZoom = TRUE)  # allow zooming

fig  
```

# -------------------------------------------------- #########
#  Turning Off Responsiveness  #########
# displays mode bar when cursor placed(Not part of original code)#####
```{r}
library(plotly) 

fig <- plot_ly()%>%
  add_trace(data=exam_data, x = ~MATHS, y = ~ENGLISH, type = 'scatter', mode = 'lines+markers')
config(fig, responsive = FALSE)%>%layout(plot_bgcolor='#e5ecf6',
          xaxis = list(
            zerolinecolor = '#ffff',
            zerolinewidth = 2,
            gridcolor = 'ffff'),
          yaxis = list(
            zerolinecolor = '#ffff',
            zerolinewidth = 2,
            gridcolor = 'ffff')
          )
```

# --------------------------------------------------- #########
#  Forcing The Modebar to Always Be Visible           #########
# It always shows mode bar without placing cursor on it(not part of original code) #######
```{r}

library(plotly)

fig <- plot_ly(
  data = exam_data, 
  x = ~MATHS, 
  y = ~ENGLISH, 
  type = 'scatter', 
  mode = 'lines+markers'
) %>%
layout(
  plot_bgcolor = '#e5ecf6',
  xaxis = list(
    zerolinecolor = '#ffff',
    zerolinewidth = 2,
    gridcolor = '#ffff'
  ),
  yaxis = list(
    zerolinecolor = '#ffff',
    zerolinewidth = 2,
    gridcolor = '#ffff'
  )
)

fig <- config(
  fig,
  displayModeBar = TRUE   #to show toolbar visible always
)

fig   
```

# -----------------------------------                 #########
#     Preventing the Modebar from Appearing           #########
# It always doesnt shows mode bar(not part of original code) #######
```{r}

library(plotly)

fig <- plot_ly(
  data = exam_data, 
  x = ~MATHS, 
  y = ~ENGLISH, 
  type = 'scatter', 
  mode = 'lines+markers'
) %>%

layout(
  plot_bgcolor = '#e5ecf6',
  xaxis = list(
    zerolinecolor = '#ffff',
    zerolinewidth = 2,
    gridcolor = '#ffff'
  ),
  yaxis = list(
    zerolinecolor = '#ffff',
    zerolinewidth = 2,
    gridcolor = '#ffff'
  )
)


fig <- config(
  fig,
  displayModeBar = FALSE  
)


fig
```