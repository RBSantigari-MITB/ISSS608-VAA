---
title: "Take_homeExercise2"
author: "Rajesh babu Santigari"
format: html
editor: visual
---

#Take home exercise 2

##Loading tidy verse
##Loadng Data

```{r}
# Step 1: Load the tidyverse first
library(tidyverse)

# Step 2: Load your CSV files
nodes <- read_csv("C:\\RBSantigari-MITB\\ISSS608-VAA\\TakehomeExercises\\Take_homeExercise2\\data\\Nodes_Table.csv")
links <- read_csv("C:\\RBSantigari-MITB\\ISSS608-VAA\\TakehomeExercises\\Take_homeExercise2\\data\\Links_Table.csv")

# Step 3: Check structure
glimpse(nodes)
glimpse(links)
```

```{r}
# Find Sailor Shift in the nodes
sailor <- nodes %>%
  filter(name == "Sailor Shift")

sailor
```

```{r}
# Save Sailor's ID
sailor_id <- 17255

# Get all edges where Sailor is either source or target
sailor_edges <- links %>%
  filter(source == sailor_id | target == sailor_id)

# View result
glimpse(sailor_edges)
```

```{r}
connected_ids <- unique(c(sailor_edges$source, sailor_edges$target))
connected_ids <- connected_ids[connected_ids != sailor_id]
```

```{r}
connected_nodes <- nodes %>%
  filter(id %in% connected_ids) %>%
  select(id, `Node Type`, name, genre)

head(connected_nodes, 10)  # View sample rows
```

```{r}
# Clean connected nodes: remove rows with missing id or name
connected_nodes <- connected_nodes %>%
  filter(!is.na(id) & !is.na(name))

# Clean connected links: keep only those with valid source/target, and valid Edge Type
connected_links <- links %>%
  filter(source %in% connected_nodes$id | target %in% connected_nodes$id) %>%
  filter(!is.na(source) & !is.na(target) & !is.na(`Edge Type`))
```

```{r}
# Check for remaining NA rows
sum(is.na(connected_nodes$id))      # Should be 0
sum(is.na(connected_nodes$name))    # Should be 0
sum(is.na(connected_links$source))  # Should be 0
sum(is.na(connected_links$target))  # Should be 0
sum(is.na(connected_links$`Edge Type`))  # Should be 0
```

```{r}
# Ensure source and target are integers
connected_links <- connected_links %>%
  mutate(
    source = as.integer(source),
    target = as.integer(target)
  )

```

```{r}
# Get the final list of valid node IDs
valid_ids <- connected_nodes$id

# Filter links where both source and target exist in valid node list
connected_links <- connected_links %>%
  filter(source %in% valid_ids & target %in% valid_ids)
```

```{r}
mini_graph <- tbl_graph(
  nodes = connected_nodes,
  edges = connected_links,
  directed = TRUE
)

mini_graph
```

```