---
title: "In_classExercise5"
author: "Rajesh babu Santigari"
format:
  html:
    toc: true
editor: visual
---

# Getting Started

```{r}
pacman::p_load(tidyverse, jsonlite,
               tidygraph, ggraph)
```

# Importing Kownledge Graph Data

```{r}
kg <- fromJSON("C:\\RBSantigari-MITB\\ISSS608-VAA\\InClassExercises\\In_ClassExercise5\\data\\MC1_graph.json")
```

## Inspect structure

```{r}
str(kg, max.level = 1)
```

# Extracting the edges and nodes tables

```{r}
nodes_tbl <- as_tibble(kg$nodes)
edges_tbl <- as_tibble(kg$links) 
```

## Initial EDA

### frequency distribution of Edges Type field of edges_tbl.

```{r}
ggplot(data = edges_tbl,
       aes(y = `Edge Type`)) +
  geom_bar()
```

### frequency distribution of Node Type field of nodes_tbl.

```{r}
ggplot(data = nodes_tbl,
       aes(y = `Node Type`)) +
  geom_bar()
```

# Creating Knowledge Graph

## Mapping from node id to row index

```{r}
id_map <- tibble(id = nodes_tbl$id,
                 index = seq_len(
                   nrow(nodes_tbl)))
```

## Map source and target IDs to row indices

```{r}
edges_tbl <- edges_tbl %>%
  left_join(id_map, by = c("source" = "id")) %>%
  rename(from = index) %>%
  left_join(id_map, by = c("target" = "id")) %>%
  rename(to = index)
```

## Filter out any unmatched (invalid) edges

```{r}
edges_tbl <- edges_tbl %>%
  filter(!is.na(from), !is.na(to))
```

## Creating tidygraph

```{r}
graph <- tbl_graph(nodes = nodes_tbl, 
                   edges = edges_tbl, 
                   directed = kg$directed)
```

```{r}
class(graph)
```

# Visualising the knowledge graph

```{r}
set.seed(1234)
```

## Visualising the whole graph

```{r}
ggraph(graph, layout = "fr") +
  geom_edge_link(alpha = 0.3, 
                 colour = "gray") +
  geom_node_point(aes(color = `Node Type`), 
                  size = 4) +
  geom_node_text(aes(label = name), 
                 repel = TRUE, 
                 size = 2.5) +
  theme_void()
```

## Visualising the sub-graph

### Filtering edges to only “MemberOf”

```{r}
graph_memberof <- graph %>%
  activate(edges) %>%
  filter(`Edge Type` == "MemberOf")
```

### Extracting only connected nodes (i.e., used in these edges)

```{r}
used_node_indices <- graph_memberof %>%
  activate(edges) %>%
  as_tibble() %>%
  select(from, to) %>%
  unlist() %>%
  unique()
```

### Keeping only those nodes

```{r}
graph_memberof <- graph_memberof %>%
  activate(nodes) %>%
  mutate(row_id = row_number()) %>%
  filter(row_id %in% used_node_indices) %>%
  select(-row_id)  # optional cleanup
```

### Plotting the sub-graph

```{r}
ggraph(graph_memberof, 
       layout = "fr") +
  geom_edge_link(alpha = 0.5, 
                 colour = "gray") +
  geom_node_point(aes(color = `Node Type`), 
                  size = 1) +
  geom_node_text(aes(label = name), 
                 repel = TRUE, 
                 size = 2.5) +
  theme_void()
```
